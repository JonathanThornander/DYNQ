@using Dynq

@typeparam TMessage

@if (ChildContent is not null)
{
    @ChildContent(_context)
}

@code {
    private MessageSubscription? _subscription;
    private TMessage? _context;

    [Inject]
    public required IDynqService DynqService { get; set; }

    [Parameter]
    public RenderFragment<TMessage?>? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        _subscription = DynqService.Subscribe<TMessage>(async message =>
        {
            _context = message;
            await InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        _subscription?.Dispose();
        GC.SuppressFinalize(this);
    }
}
